<?xml version="1.0"?>

<settings:SettingsEditor xmlns:fx="http://ns.adobe.com/mxml/2009"
                         xmlns:s="library://ns.adobe.com/flex/spark"
                         xmlns:settings="gov.lbl.aercalc.view.settings.*"
                         gap="15">


    <fx:Script>
		<![CDATA[
        import flash.events.EventDispatcher;

        import gov.lbl.aercalc.util.Utils;

        import spark.components.Alert;
        
        import gov.lbl.aercalc.model.ApplicationModel;
        import gov.lbl.aercalc.model.settings.AppSettings;
        import gov.lbl.aercalc.util.Logger;

        import spark.filters.GlowFilter;

        [Bindable]
        public var appSettings:AppSettings


        protected override function read(settings:AppSettings):void
        {
			window7DBPath.text = settings.lblWindowDBPath;
            window7ExePath.text = settings.lblWindowExePath;
            window7IniPath.text = settings.lblWindowIniPath;
        }

        protected override function write(settings:AppSettings):void
        {
            settings.lblWindowDBPath = window7DBPath.text;
            settings.lblWindowExePath = window7ExePath.text;
            settings.lblWindowIniPath = window7IniPath.text;
        }


        private function browseForNewW7DB():void {
            try {
                var oldDBFile:File = new File(settings.lblWindowDBPath);
                var newW7DBFile:File
                if (oldDBFile.exists) {
                    newW7DBFile = oldDBFile;
                } else {
                    newW7DBFile = ApplicationModel.baseStorageDir.resolvePath(ApplicationModel.WINDOW_DEFAULT_MDB_FILE_PATH);
                }

                newW7DBFile.browseForOpen("Select new W7 database",[ new FileFilter("Access Database", "*.mdb")]);
                newW7DBFile.addEventListener(Event.SELECT, onNewW7DBSelected, false, 0, true);
                newW7DBFile.addEventListener(Event.CANCEL, onNewW7DBCancel, false, 0, true);
            }
            catch (error:Error){
                Logger.error("onBrowseForNewDB() error: " + error);
                Alert.show("Cannot browse for W7 db. See log for details. (Error: " + error + ")", "Error");
            }
        }

        private function onNewW7DBSelected(event:Event):void{
            var newW7DBFile:File = event.target as File;
            newW7DBFile.removeEventListener(Event.SELECT, onNewW7DBSelected);
            newW7DBFile.removeEventListener(Event.CANCEL, onNewW7DBCancel);

            // Error Checks
            if (!newW7DBFile.exists){
                Alert.show("No file exists at " + newW7DBFile.nativePath, "File Not Found");
                return;
            }
            if (newW7DBFile.extension != "mdb") {
                Alert.show("Selected file is not a W7 database", "Incorrect File Type");
                return;
            }

            // Update settings to make new default
            if ( window7DBPath.text !=  newW7DBFile.nativePath){
                window7DBPath.text = newW7DBFile.nativePath;
                //call onChange event so settings model is updated
                onChange();
            }

        }

        private function onNewW7DBCancel(event:Event):void {
            var newW7DBFile:File = event.target as File;
            newW7DBFile.removeEventListener(Event.SELECT, onNewW7DBSelected);
            newW7DBFile.removeEventListener(Event.CANCEL, onNewW7DBCancel);
        }


        public function browseForExe():void{
            appFileChangeMode = 'exe';
            browseForNewW7AppFile();
        }

        public function browseForIni():void{
            appFileChangeMode = 'ini';
            browseForNewW7AppFile();
        }

        private var appFileChangeMode:String = 'exe';
        private function getCurrentFileFilter():FileFilter{
            var fileFilter:FileFilter;
            var classification:String;
            switch(appFileChangeMode) {
                case "exe":
                    classification = "Executables";
                    break;
                case "ini":
                    classification = "INI Files";
                    break;
                default:
                    classification = appFileChangeMode + " Files";
                    break;
            }

            fileFilter = new FileFilter(classification, "*."+appFileChangeMode);
            return fileFilter;
        }

        private function browseForNewW7AppFile():void {
            try {
                var newW7AppFile:File ;//= ApplicationModel.baseStorageDir.resolvePath(ApplicationModel.WINDOW_DEFAULT_MDB_FILE_PATH);
                switch(appFileChangeMode) {
                    case 'exe' :
                        //check current settings
                        newW7AppFile = new File(settings.lblWindowExePath) ;
                        if (!newW7AppFile.exists) {
                            if (newW7AppFile.parent.exists) {
                                newW7AppFile = newW7AppFile.parent;
                            }
                        }
                        if (!newW7AppFile.exists) {
                            //default to ApplicationModel.VERION_WINDOW_BASE if it is present
                            if (Utils.isWindowVersionPresent(ApplicationModel.VERION_WINDOW_BASE, "W7.exe")) {
                                newW7AppFile = Utils.getWindowApplicationDir(ApplicationModel.VERION_WINDOW_BASE).resolvePath("W7.exe");
                            } else {
                                //if the program files are present, default to that directory
                                newW7AppFile = Utils.getWindowVersionsParentDirForBrowsing();
                            }
                        }

                        break;
                    case 'ini' :
                        newW7AppFile = new File(settings.lblWindowIniPath) ;
                        if (!newW7AppFile.exists) {
                            if (newW7AppFile.parent.exists) {
                                newW7AppFile = newW7AppFile.parent;
                            }
                        }
                        if (!newW7AppFile.exists) {
                            //check in default location for ini
                            newW7AppFile = Utils.getWindowIniParentDirForBrowsing();

                        }
                        break;
                    default:
                        throw new Error('unsupported browseForOpen : '+appFileChangeMode)
                        break;
                }

                newW7AppFile.browseForOpen("Select new W7 "+appFileChangeMode + " file", [getCurrentFileFilter()]);
                newW7AppFile.addEventListener(Event.SELECT, onNewW7AppFileSelected, false, 0, true);
                newW7AppFile.addEventListener(Event.CANCEL, onNewW7AppFileCancel, false, 0, true);
            }
            catch (error:Error){
                Logger.error("browseForNewW7AppFile() error: " + error);
                Alert.show("Cannot browse for W7 "+appFileChangeMode+". See log for details. (Error: " + error + ")", "Error");
            }
        }


        private function onNewW7AppFileSelected(event:Event):void{
            var newW7AppFile:File = event.target as File;
            newW7AppFile.removeEventListener(Event.SELECT, onNewW7AppFileSelected);
            newW7AppFile.removeEventListener(Event.CANCEL, onNewW7AppFileCancel);

            // Error Checks
            if (!newW7AppFile.exists){
                Alert.show("No file exists at " + newW7AppFile.nativePath, "File Not Found");
                return;
            }
            if (newW7AppFile.extension != appFileChangeMode) {
                Alert.show("Selected file is not a W7 " + appFileChangeMode, "Incorrect File Type");
                return;
            }

            var ti:TextInput = appFileChangeMode == 'exe' ? window7ExePath : window7IniPath;

            // Update settings to make new default
            if ( ti.text !=  newW7AppFile.nativePath){
                ti.text = newW7AppFile.nativePath;
                if (appFileChangeMode == 'exe') {
                    var autoIni:File = Utils.getAutoIniForExe(newW7AppFile);
                    if (autoIni && autoIni.exists) {
                        window7IniPath.text = autoIni.nativePath;
                        myFilter.stop();myFilter.play();
                    }

                }

                //call onChange event so settings model is updated
                onChange();
            }

        }

        private function onNewW7AppFileCancel(event:Event):void {
            var newW7AppFile:File = event.target as File;
            newW7AppFile.removeEventListener(Event.SELECT, onNewW7AppFileSelected);
            newW7AppFile.removeEventListener(Event.CANCEL, onNewW7AppFileCancel);
        }



        ]]>

	</fx:Script>
    <fx:Declarations>

        <s:AnimateFilter id="myFilter"
                         target="{window7IniPath}"
                         repeatCount="1"
                         duration="1000"
                         bitmapFilter="{new spark.filters.GlowFilter()}">
            <s:SimpleMotionPath property="strength" valueFrom="0" valueTo="5"/>
            <s:SimpleMotionPath property="blurX" valueFrom="0" valueTo="4"/>
            <s:SimpleMotionPath property="blurY" valueFrom="0" valueTo="4"/>
        </s:AnimateFilter>
    </fx:Declarations>


    <s:Label text="Imports" width="100%" styleName="formSectionHeader"/>

    <s:Label text="Locate the WINDOW 7 database for importing products" width="100%"/>

    <s:HGroup width="100%">
        <s:Label text="WINDOW 7 DB:" toolTip="WINDOW 7 Database" width="100"/>
        <s:TextInput id="window7DBPath" 
					 width="100%"
                     editable="false"
					 toolTip="{appSettings.lblWindowDBPath}"/>
        <s:Button id="btnBrowseW7" label="Browse" click="browseForNewW7DB()"/>
    </s:HGroup>
    <s:HGroup>
        <s:Spacer width="100"/>
        <s:Label text="(Path is read-only and shown only for reference.)" styleName="formNote"/>
    </s:HGroup>

    <s:Line height="1" width="100%" >
        <s:stroke>
            <s:SolidColorStroke color="#000000"/>
        </s:stroke>
    </s:Line>

    <s:Label text="WINDOW 7 executable version" width="100%"/>

    <s:HGroup width="100%">
        <s:Label text="WINDOW 7 exe:" toolTip="WINDOW 7 Executable" width="100"/>
        <s:TextInput id="window7ExePath"
                     width="100%"
                     editable="false"
                     toolTip="{appSettings.lblWindowExePath}"/>
        <s:Button id="btnBrowseW7Exe" label="Browse" click="browseForExe()"/>
    </s:HGroup>
    <s:HGroup width="100%">
        <s:Label text="WINDOW 7 ini:" toolTip="WINDOW 7 ini file" width="100"/>
        <s:TextInput id="window7IniPath"
                     width="100%"
                     editable="false"
                     toolTip="{appSettings.lblWindowIniPath}"/>
        <s:Button id="btnBrowseW7Ini" label="Browse" click="browseForIni()"/>
    </s:HGroup>
    <s:HGroup>
        <s:Spacer width="100"/>
        <s:Label text="(Paths above are read-only and shown only for reference.)" styleName="formNote"/>
    </s:HGroup>

</settings:SettingsEditor>